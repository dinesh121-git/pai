import math

def minimax(depth, index, is_max, scores, max_depth):
    if depth == max_depth:  # Base case: return leaf node valu\e
        return scores[index]

    next_depth = depth + 1
    print(next_depth)
    left = minimax(next_depth, index * 2, not is_max, scores, max_depth)
    print(left)
    print("r")
    right = minimax(next_depth, index * 2 + 1, not is_max, scores, max_depth)
    print("z")
    print(right)
    print("P")

    return max(left, right) if is_max else min(left, right)

scores = [3, 5, 2, 9, 12, 5, 23, 23]
max_depth = int(math.log2(len(scores)))

print("Optimal value:", minimax(0, 0, True, scores, max_depth))
#constraint stasifctaion
from simpleai.search import backtrack,CspProblem
def constraint_func(names,values):
  return values[0]!=values[1]
names=("ma","dh","di","ne")
colors={name:["red","green"] for name in names}
constraints=[(("ma","dh"),constraint_func),
             (("di","dh"),constraint_func),
             (("di","ne"),constraint_func),
             (("ma","ne"),constraint_func)]
probelm=CspProblem(names,colors,constraints)
output=backtrack(probelm)

for i,v in output.items():
  print(i,">",v)
#dfs water jug
def dfs(jug1, jug2, target, visited=set()):
    if (jug1, jug2) in visited:
        return False  # Avoid repeating states
    visited.add((jug1, jug2))

    print(f"Current State: ({jug1}, {jug2})")  # Show each step

    if (jug1, jug2) == target:  
        print("✅ Solution Found!")
        return True  

    return (dfs(5, jug2, target, visited) or  # Fill Jug1 (5L)
            dfs(jug1, 3, target, visited) or  # Fill Jug2 (3L)
            dfs(0, jug2, target, visited) or  # Empty Jug1
            dfs(jug1, 0, target, visited) or  # Empty Jug2
            dfs(min(jug1 + jug2, 5), max(0, jug1 + jug2 - 5), target, visited) or  # Pour Jug2 → Jug1
            dfs(max(0, jug1 + jug2 - 3), min(jug1 + jug2, 3), target, visited))  # Pour Jug1 → Jug2

# Get user input for target state
x, y = map(int, input("Enter target state (x y): ").split())

# Start DFS from (0, 0)
dfs(0, 0, (x, y))

